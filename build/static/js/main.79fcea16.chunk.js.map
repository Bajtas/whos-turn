{"version":3,"sources":["Components/Header/Header.js","Components/Description/Description.js","Components/PlayerList/PlayerList.js","Components/Player/Player.js","Components/Timer/Timer.js","Components/TurnNumber/TurnNumber.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","concat","start","Description","children","PlayerList","state","players","playerName","addNewPlayer","_this","setState","Object","toConsumableArray","handleNewPlayerNameChange","e","objectSpread","target","value","removePlayer","index","splice","handleEnterKeyPress","keyCode","which","startPlay","onStartPlay","_this2","this","map","player","i","key","onClick","id","onChange","onKeyPress","type","React","Component","PlayerStateCarousel","_this$props","Timer","componentDidMount","intervalHandler","setInterval","componentWillReceiveProps","newProps","clearInterval","avgTurnTimes","Fragment","moment","duration","diff","format","trim","avg","TurnNumber","turn","momentDurationFormatSetup","keyMap","space","sequence","action","App","avgTurnsTimes","length","turnStart","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","hotkeyHandlers","event","avgTurnTime","find","x","calculatedAvg","times","push","end","asMilliseconds","reduce","acc","curr","index_es","handlers","Components_Header_Header","Components_Description_Description","Components_PlayerList_PlayerList","Player","Components_Timer_Timer","Components_TurnNumber_TurnNumber","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAQeA,EANA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,UAAQC,UAAS,cAAAC,OAAgBL,EAAMM,MAAQ,QAAU,KAAzD,eCUaC,EAXK,SAAAP,GAAK,OACvBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,eACjBH,EAAAC,EAAAC,cAAA,2EACgE,IAC9DF,EAAAC,EAAAC,cAAA,4BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,oCACCJ,EAAMQ,WC8DIC,6MApEbC,MAAQ,CACNC,QAAS,GACTC,WAAY,MAGdC,aAAe,WACTC,EAAKJ,MAAME,YACbE,EAAKC,SAAS,CACZJ,QAAQK,OAAAC,EAAA,EAAAD,CAAKF,EAAKJ,MAAMC,SAAjBN,OAAA,CAA0BS,EAAKJ,MAAME,aAC5CA,WAAY,QAIlBM,0BAA4B,SAAAC,GAC1BL,EAAKC,SAALC,OAAAI,EAAA,EAAAJ,CAAA,GAAmBF,EAAKJ,MAAxB,CAA+BE,WAAYO,EAAEE,OAAOC,YAGtDC,aAAe,SAAAC,GACbV,EAAKC,SAALC,OAAAI,EAAA,EAAAJ,CAAA,CACEL,QAASG,EAAKJ,MAAMC,QAAQc,OAAOD,EAAO,IACvCV,EAAKJ,WAIZgB,oBAAsB,SAAAP,GAEP,MADFA,EAAEQ,QAAUR,EAAEQ,QAAUR,EAAES,QAGnCd,EAAKD,kBAITgB,UAAY,WACVf,EAAKd,MAAM8B,YAAYhB,EAAKJ,MAAMC,kFAG3B,IAAAoB,EAAAC,KACP,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZ4B,KAAKtB,MAAMC,QAAQsB,IAAI,SAACC,EAAQC,GAAT,OACtBlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBgC,IAAG,GAAA/B,OAAK6B,EAAL,KAAA7B,OAAe8B,IACnDlC,EAAAC,EAAAC,cAAA,aAAQ+B,GACRjC,EAAAC,EAAAC,cAAA,UAAQkC,QAAS,kBAAMN,EAAKR,aAAaY,KAAzC,QAGJlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,SAAOmC,GAAG,cAAclC,UAAU,qBAAlC,eAGAH,EAAAC,EAAAC,cAAA,SACEmC,GAAG,cACHhB,MAAOU,KAAKtB,MAAME,WAClB2B,SAAUP,KAAKd,0BACfsB,WAAYR,KAAKN,oBACjBe,KAAK,OACLrC,UAAU,gBAEZH,EAAAC,EAAAC,cAAA,UAAQkC,QAASL,KAAKnB,cAAtB,MAGFZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYiC,QAASL,KAAKH,WAA5C,kBA9Daa,IAAMC,WCQhBC,mLAPJ,IAAAC,EACoBb,KAAKhC,MAAxBW,EADDkC,EACClC,QAASa,EADVqB,EACUrB,MAEjB,OAAOvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeO,EAAQa,WAJfkB,IAAMC,2BCoCzBG,6MAlCbC,kBAAoB,WAClBjC,EAAKkC,gBAAkBC,YAAY,kBAAMnC,EAAKC,SAAS,KAAK,OAG9DmC,0BAA4B,SAAAC,GACtBrC,EAAKd,MAAMM,QAAU6C,EAAS7C,QAChC8C,cAActC,EAAKkC,iBACnBlC,EAAKkC,gBAAkBC,YAAY,kBAAMnC,EAAKC,SAAS,KAAK,8EAIvD,IAAA8B,EACyBb,KAAKhC,MAA7BM,EADDuC,EACCvC,MAAO+C,EADRR,EACQQ,aACf,OACEpD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoD,SAAA,KACErD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,QACfmD,IAAOC,SAASD,MAASE,KAAKnD,IAAQoD,OAAO,QAAS,CACrDC,MAAM,KAGTN,GACCA,EAAaO,KACX3D,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAlB,iBAEGiD,EAAaO,IAAIF,OAAO,QAAS,CAChCC,MAAM,aA1BFjB,IAAMC,WCOXkB,mLAPJ,IACCC,EAAS9B,KAAKhC,MAAd8D,KAER,OAAO7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,SAA8B0D,UAJhBpB,IAAMC,4CCW/BoB,IAA0BR,KAqB1B,IAAMS,EAAS,CACbC,MAAO,CAAEC,SAAU,QAASC,OAAQ,UAkGvBC,6MA9Fb1D,MAAQ,CACNJ,OAAO,EACPK,QAAS,GACTa,MAAO,EACPsC,KAAM,EACNO,cAAe,MAEjBvC,YAAc,SAAAnB,GACRA,EAAQ2D,OAAS,IACnBxD,EAAKC,SAAS,CAAET,OAAO,EAAMK,UAASa,MAAO,EAAG+C,UAAWhB,QAlCjE,SAAiBiB,GAMf,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMF,OAKlB,IAAMK,GAEXD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAqBnBM,CAAQpE,OAIZqE,eAAiB,CACff,MAAO,SAAAgB,GACL,GAAInE,EAAKJ,MAAMJ,MAAO,CACpB,IAAM4E,EAAcpE,EAAKJ,MAAM2D,cAAcc,KAC3C,SAAAC,GAAC,OAAIA,EAAE5D,QAAUV,EAAKJ,MAAMc,QAE1B6D,EAAgB,GAChBH,GACFA,EAAYI,MAAMC,KAAK,CACrBjF,MAAOQ,EAAKJ,MAAM6D,UAClBiB,IAAKjC,QAGP2B,EAAYtB,IAAML,IAAOC,SACvB0B,EAAYI,MACTrD,IAAI,SAAAmD,GAAC,OAAIA,EAAEI,IAAI/B,KAAK2B,EAAE9E,SACtB2B,IAAI,SAAAmD,GAAC,OAAI7B,IAAOC,SAAS4B,GAAGK,mBAC5BC,OAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAOC,GAAO,GACtCV,EAAYI,MAAMhB,QAEtBe,EAAarE,OAAAC,EAAA,EAAAD,CAAOF,EAAKJ,MAAM2D,gBAE/BgB,EAAgB,CACd,CACE7D,MAAOV,EAAKJ,MAAMc,MAClB8D,MAAO,CAAC,CAAEhF,MAAOQ,EAAKJ,MAAM6D,UAAWiB,IAAKjC,UAKlDzC,EAAKC,SAALC,OAAAI,EAAA,EAAAJ,CAAA,GACKF,EAAKJ,MADV,CAEE6D,UAAWhB,MACXc,cAAegB,EACf7D,MACEV,EAAKJ,MAAMc,MAAQ,GAAKV,EAAKJ,MAAMC,QAAQ2D,OACvC,EACAxD,EAAKJ,MAAMc,MAAQ,EACzBsC,KACEhD,EAAKJ,MAAMc,MAAQ,GAAKV,EAAKJ,MAAMC,QAAQ2D,OACvCxD,EAAKJ,MAAMoD,KAAO,EAClBhD,EAAKJ,MAAMoD,mFAMhB,IAAA/B,EAAAC,KACP,OACE/B,EAAAC,EAAAC,cAAC0F,EAAA,QAAD,CAAS7B,OAAQA,EAAQ8B,SAAU9D,KAAKgD,gBACtC/E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAC4F,EAAD,CAAQzF,MAAO0B,KAAKtB,MAAMJ,SACxB0B,KAAKtB,MAAMJ,OACXL,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoD,SAAA,KACErD,EAAAC,EAAAC,cAAC6F,EAAD,KACA/F,EAAAC,EAAAC,cAAC8F,EAAD,CAAYnE,YAAaE,KAAKF,iBAKnCE,KAAKtB,MAAMJ,OACVL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAC+F,EAAWlE,KAAKtB,OACjBT,EAAAC,EAAAC,cAACgG,EAAD,CACE7F,MAAO0B,KAAKtB,MAAM6D,UAClBlB,aAAcrB,KAAKtB,MAAM2D,cAAcc,KACrC,SAAAC,GAAC,OAAIA,EAAE5D,QAAUO,EAAKrB,MAAMc,UAIhCvB,EAAAC,EAAAC,cAACiG,EAAD,CAAYtC,KAAM9B,KAAKtB,MAAMoD,iBAtFzBnB,aC1BE0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO1G,EAAAC,EAAAC,cAACyG,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.79fcea16.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = props => (\r\n  <header className={`App-header ${props.start ? \"start\" : \"\"}`}>\r\n    Whos Turn?\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Description = props => (\r\n  <section className=\"description\">\r\n    <div>\r\n      Are you playing some board game and everybody is still asking{\" \"}\r\n      <i>\"who's turn?\"</i>\r\n    </div>\r\n    <div className=\"use-it\">This simple app was made for you</div>\r\n    {props.children}\r\n  </section>\r\n);\r\n\r\nexport default Description;\r\n","import React from \"react\";\r\n\r\nclass PlayerList extends React.Component {\r\n  state = {\r\n    players: [],\r\n    playerName: \"\"\r\n  };\r\n\r\n  addNewPlayer = () => {\r\n    if (this.state.playerName)\r\n      this.setState({\r\n        players: [...this.state.players, this.state.playerName],\r\n        playerName: \"\"\r\n      });\r\n  };\r\n\r\n  handleNewPlayerNameChange = e => {\r\n    this.setState({ ...this.state, playerName: e.target.value });\r\n  };\r\n\r\n  removePlayer = index => {\r\n    this.setState({\r\n      players: this.state.players.splice(index, 1),\r\n      ...this.state\r\n    });\r\n  };\r\n\r\n  handleEnterKeyPress = e => {\r\n    var code = e.keyCode ? e.keyCode : e.which;\r\n    if (code === 13) {\r\n      //Enter keycode\r\n      this.addNewPlayer();\r\n    }\r\n  };\r\n\r\n  startPlay = () => {\r\n    this.props.onStartPlay(this.state.players);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"player-list\">\r\n        {this.state.players.map((player, i) => (\r\n          <div className=\"player-list--name\" key={`${player}_${i}`}>\r\n            <label>{player}</label>\r\n            <button onClick={() => this.removePlayer(i)}>x</button>\r\n          </div>\r\n        ))}\r\n        <div className=\"add-new-player\">\r\n          <label id=\"player-name\" className=\"player-name-label\">\r\n            Player name\r\n          </label>\r\n          <input\r\n            id=\"player-name\"\r\n            value={this.state.playerName}\r\n            onChange={this.handleNewPlayerNameChange}\r\n            onKeyPress={this.handleEnterKeyPress}\r\n            type=\"text\"\r\n            className=\"player-name\"\r\n          />\r\n          <button onClick={this.addNewPlayer}>+</button>\r\n        </div>\r\n\r\n        <div className=\"start-section\">\r\n            <button className=\"start-btn\" onClick={this.startPlay}>Start</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayerList;\r\n","import React from \"react\";\r\n\r\nclass PlayerStateCarousel extends React.Component {\r\n  render() {\r\n    const { players, index } = this.props;\r\n\r\n    return <div className=\"player-name\">{players[index]}</div>;\r\n  }\r\n}\r\n\r\nexport default PlayerStateCarousel;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nclass Timer extends React.Component {\r\n  componentDidMount = () => {\r\n    this.intervalHandler = setInterval(() => this.setState({}), 15);\r\n  };\r\n\r\n  componentWillReceiveProps = newProps => {\r\n    if (this.props.start !== newProps.start) {\r\n      clearInterval(this.intervalHandler);\r\n      this.intervalHandler = setInterval(() => this.setState({}), 15);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { start, avgTurnTimes } = this.props;\r\n    return (\r\n      <>\r\n        <header className=\"time\">\r\n          {moment.duration(moment().diff(start)).format(\"mm:ss\", {\r\n            trim: false\r\n          })}\r\n        </header>\r\n        {avgTurnTimes &&\r\n          avgTurnTimes.avg && (\r\n            <header className=\"avg-time\">\r\n              Avg turn time:\r\n              {avgTurnTimes.avg.format(\"mm:ss\", {\r\n                trim: false\r\n              })}\r\n            </header>\r\n          )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\n\r\nclass TurnNumber extends React.Component {\r\n  render() {\r\n    const { turn } = this.props;\r\n\r\n    return <div className=\"turn\" >Turn: {turn}</div>;\r\n  }\r\n}\r\n\r\nexport default TurnNumber;","import React, { Component } from \"react\";\nimport Header from \"./Components/Header/Header\";\nimport Description from \"./Components/Description/Description\";\nimport PlayerList from \"./Components/PlayerList/PlayerList\";\nimport Player from \"./Components/Player/Player\";\nimport Timer from \"./Components/Timer/Timer\";\nimport TurnNumber from \"./Components/TurnNumber/TurnNumber\";\n\nimport \"./App.scss\";\nimport moment from \"moment\";\nimport momentDurationFormatSetup from \"moment-duration-format\";\nimport { HotKeys } from \"react-hotkeys\";\n\nmomentDurationFormatSetup(moment);\nfunction shuffle(array) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nconst keyMap = {\n  space: { sequence: \"space\", action: \"keyup\" }\n};\n\nclass App extends Component {\n  state = {\n    start: false,\n    players: [],\n    index: 0,\n    turn: 0,\n    avgTurnsTimes: []\n  };\n  onStartPlay = players => {\n    if (players.length > 0) {\n      this.setState({ start: true, players, index: 0, turnStart: moment() });\n      shuffle(players);\n    }\n  };\n\n  hotkeyHandlers = {\n    space: event => {\n      if (this.state.start) {\n        const avgTurnTime = this.state.avgTurnsTimes.find(\n          x => x.index === this.state.index\n        );\n        let calculatedAvg = [];\n        if (avgTurnTime) {\n          avgTurnTime.times.push({\n            start: this.state.turnStart,\n            end: moment()\n          });\n\n          avgTurnTime.avg = moment.duration(\n            avgTurnTime.times\n              .map(x => x.end.diff(x.start))\n              .map(x => moment.duration(x).asMilliseconds())\n              .reduce((acc, curr) => (acc += curr), 0) /\n              avgTurnTime.times.length\n          );\n          calculatedAvg = [...this.state.avgTurnsTimes];\n        } else {\n          calculatedAvg = [\n            {\n              index: this.state.index,\n              times: [{ start: this.state.turnStart, end: moment() }]\n            }\n          ];\n        }\n\n        this.setState({\n          ...this.state,\n          turnStart: moment(),\n          avgTurnsTimes: calculatedAvg,\n          index:\n            this.state.index + 1 >= this.state.players.length\n              ? 0\n              : this.state.index + 1,\n          turn:\n            this.state.index + 1 >= this.state.players.length\n              ? this.state.turn + 1\n              : this.state.turn\n        });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <HotKeys keyMap={keyMap} handlers={this.hotkeyHandlers}>\n        <div className=\"App\">\n          <div className=\"main-section\">\n            <Header start={this.state.start}/>\n            {!this.state.start && (\n              <>\n                <Description>\n                <PlayerList onStartPlay={this.onStartPlay} />\n                </Description>\n              </>\n            )}\n          </div>\n          {this.state.start && (\n            <div className=\"current-palayer-section\">\n              <Player {...this.state} />\n              <Timer\n                start={this.state.turnStart}\n                avgTurnTimes={this.state.avgTurnsTimes.find(\n                  x => x.index === this.state.index\n                )}\n              />\n\n              <TurnNumber turn={this.state.turn} />\n            </div>\n          )}\n        </div>\n      </HotKeys>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}